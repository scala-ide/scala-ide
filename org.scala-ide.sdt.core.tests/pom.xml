<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemalocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.scala-ide</groupId>
    <artifactId>org.scala-ide.sdt.build</artifactId>
    <version>4.0.0-SNAPSHOT</version>
    <relativePath>../org.scala-ide.sdt.build/pom.xml</relativePath>
  </parent>
  <artifactId>org.scala-ide.sdt.core.tests</artifactId>
  <packaging>eclipse-test-plugin</packaging>
  
  <dependencies>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
    </dependency>
  </dependencies>

  <profiles>
    <profile>
      <!-- profile used to run the memory test -->
      <id>memory-test</id>
      <dependencies>
        <dependency>
          <groupId>org.scala-lang</groupId>
          <artifactId>scala-compiler</artifactId>
        </dependency>
        <dependency>
          <groupId>org.scala-lang</groupId>
          <artifactId>scala-reflect</artifactId>
        </dependency>
      </dependencies>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <!-- unpack the compiler sources -->
              <execution>
                <id>unpack</id>
                <phase>initialize</phase>
                <goals>
                  <goal>unpack</goal>
                </goals>
                <configuration>
                  <artifactItems>
                    <artifactItem>
                      <groupId>org.scala-lang</groupId>
                      <artifactId>scala-compiler</artifactId>
                      <classifier>sources</classifier>
                      <outputDirectory>${basedir}/test-workspace/scala-compiler/src</outputDirectory>
                      <includes>scala/</includes>
                    </artifactItem>
                    <artifactItem>
                      <groupId>org.scala-lang</groupId>
                      <artifactId>scala-reflect</artifactId>
                      <classifier>sources</classifier>
                      <outputDirectory>${basedir}/test-workspace/scala-compiler/src</outputDirectory>
                      <includes>scala/</includes>
                    </artifactItem>
                  </artifactItems>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <!-- configuration of which test to run -->
            <groupId>org.eclipse.tycho</groupId>
            <artifactId>tycho-surefire-plugin</artifactId>
            <configuration>
              <redirectTestOutputToFile>true</redirectTestOutputToFile>
              <testSuite>${project.artifactId}</testSuite>
              <testClass>org.scalaide.core.leaks.MemoryLeaksTest</testClass>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <build>
    <plugins>
      <plugin>
        <!-- automatically clean up the sources which are unpacked for the memory test -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
        <configuration>
          <filesets>
            <fileset>
              <directory>./</directory>
              <includes>
                <include>test-workspace/scala-compiler/src/**/*</include>
                <include>test-workspace/scala-compiler/src</include>
              </includes>
              <followSymlinks>false</followSymlinks>
            </fileset>
          </filesets>
        </configuration>
      </plugin>
      <plugin>
        <!-- force run the scala compiler projects before tycho compilation is run -->
        <groupId>net.alchim31.maven</groupId>
        <artifactId>scala-maven-plugin</artifactId>
        <executions>
          <execution>
            <phase>process-resources</phase>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <!-- configuration of which test suite to run -->
        <groupId>org.eclipse.tycho</groupId>
        <artifactId>tycho-surefire-plugin</artifactId>
        <configuration>
          <redirectTestOutputToFile>true</redirectTestOutputToFile>
          <testSuite>${project.artifactId}</testSuite>
          <testClass>org.scalaide.core.TestsSuite</testClass>
          <dependencies>
            <dependency>
              <type>eclipse-feature</type>
              <artifactId>org.scala-ide.scala${scala.short.version}.source.feature</artifactId>
              <version>0.0.0</version>
            </dependency>
          </dependencies>
        </configuration>
      </plugin>
      <plugin>
        <!-- copy the mockito jar, so it can be used in eclipse -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
        <execution>
            <id>copy</id>
            <phase>initialize</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>org.mockito</groupId>
                  <artifactId>mockito-all</artifactId>
                  <outputDirectory>${project.build.directory}/lib</outputDirectory>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Scalastyle -->
      <plugin>
        <groupId>org.scalastyle</groupId>
        <artifactId>scalastyle-maven-plugin</artifactId>
        <configuration>
          <sourceDirectories>
            <dir>src</dir>
            <dir>test-workspace</dir>
          </sourceDirectories>
          <configLocation>../org.scala-ide.sdt.core/scala-ide-style-config.xml</configLocation>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>

